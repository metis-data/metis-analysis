"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.query5_get_database_config = exports.query4_get_database_stat_statements = exports.query3_get_database_available_extensions = exports.query2_get_tables_extra_data_from_pg_stats_extension = exports.query1_get_tables_rows_count_from_pg_class = void 0;
const query1_get_tables_rows_count_from_pg_class = `SELECT n.nspname AS schema_name, c.relname AS table_name, c.reltuples AS rows, c.relpages AS pages, c.oid AS relid
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE c.relkind = 'r'`;
exports.query1_get_tables_rows_count_from_pg_class = query1_get_tables_rows_count_from_pg_class;
const query2_get_tables_extra_data_from_pg_stats_extension = `SELECT relid,
relname as table_name, 
(schemaname || '.' || relname) as full_table_name,
n_live_tup::INTEGER as rows,
n_dead_tup::INTEGER as dead_rows,
n_mod_since_analyze,
CASE
  WHEN n_live_tup = 0 THEN 0
  ELSE n_mod_since_analyze / n_live_tup
END AS pct_mod_since_analyze,
last_analyze as last_analyze_date,
last_autoanalyze as last_autoanalyze_date,
pg_total_relation_size(relid) / 1024 as total_table_size_kb, 
pg_table_size(relid) / 1024 as table_size_kb,
pg_indexes_size(relid) / 1024 as indexes_size_kb,
pg_size_pretty(pg_total_relation_size(relid)) as total_table_size_pretty, 
pg_size_pretty(pg_table_size(relid)) as table_size_pretty,
pg_size_pretty(pg_indexes_size(relid)) as index_size_pretty
FROM pg_stat_user_tables;`;
exports.query2_get_tables_extra_data_from_pg_stats_extension = query2_get_tables_extra_data_from_pg_stats_extension;
const query3_get_database_available_extensions = `SELECT name, default_version, installed_version, comment 
FROM pg_available_extensions 
ORDER BY name`;
exports.query3_get_database_available_extensions = query3_get_database_available_extensions;
const query4_get_database_stat_statements = `
select distinct on (queryid ) queryid as query_id,
pgss.calls as calls,
pgss.query,
pgss.rows,
pgss.total_exec_time,
pgss.mean_exec_time,
pgss.dbid as db_id,
pgd.datname as database_name,
blk_read_time + blk_write_time as disk_io_time,
to_jsonb(pgss) - 'userId' - 'dbid' - 'mean_exec_time' - 'total_exec_time' - 'rows' - 'query' - 'queryid' - 'calls' as metadata
from 
pg_stat_statements as pgss
join pg_database as d  on pgss.dbid = d.oid
join pg_database pgd on pgd.oid = pgss.dbid
where rows > 0 and total_exec_time > 0
order by queryid desc
limit 300;`;
exports.query4_get_database_stat_statements = query4_get_database_stat_statements;
const query5_get_database_config = `show all`;
exports.query5_get_database_config = query5_get_database_config;
//# sourceMappingURL=index.js.map