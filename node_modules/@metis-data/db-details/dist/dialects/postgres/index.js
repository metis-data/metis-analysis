"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const db_details_1 = __importDefault(require("../db-details"));
const pg_structure_resource_1 = require("./resources/pg-structure-resource");
const pg_1 = require("pg");
const pg_client_1 = require("../utils/pg-client");
const queries_1 = require("./queries");
class PGDbDetails extends db_details_1.default {
    setClientFromConnection(connection) {
        if (!(connection && !(Object.keys(connection).length === 0) || (connection === null || connection === void 0 ? void 0 : connection.database) || (connection === null || connection === void 0 ? void 0 : connection.host) || (connection === null || connection === void 0 ? void 0 : connection.password) || (connection === null || connection === void 0 ? void 0 : connection.user))) {
            throw Error('The connection is configured incorrectly');
        }
        this.client = new pg_1.Client(connection);
    }
    setClientFromClientInstance(client) {
        this.client = new pg_1.Client(client);
    }
    setDataResourcesFromDb() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return __awaiter(this, void 0, void 0, function* () {
            const mgClient = new pg_client_1.MPgClient(this.client);
            this.pgStructure = yield (0, pg_structure_resource_1.getPgStructure)(this.client);
            this.tablesRowsAndPagesCount = yield mgClient.queryDatabase(queries_1.query1_get_tables_rows_count_from_pg_class);
            this.partialPgStatsTablesData = yield mgClient.queryDatabase(queries_1.query2_get_tables_extra_data_from_pg_stats_extension);
            if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.getDbConfig) && !((_b = this.options) === null || _b === void 0 ? void 0 : _b.getAllExtraData)) {
                this.databaseConfig = yield mgClient.queryDatabase(queries_1.query5_get_database_config);
            }
            if (((_c = this.options) === null || _c === void 0 ? void 0 : _c.getDbAvailableExtensions) && !((_d = this.options) === null || _d === void 0 ? void 0 : _d.getAllExtraData)) {
                this.databaseAvialableExtensions = yield mgClient.queryDatabase(queries_1.query3_get_database_available_extensions);
            }
            if (((_e = this.options) === null || _e === void 0 ? void 0 : _e.getDbStatStatements) && !((_f = this.options) === null || _f === void 0 ? void 0 : _f.getAllExtraData)) {
                this.databaseStatStatements = yield mgClient.queryDatabase(queries_1.query4_get_database_stat_statements);
            }
            if ((_g = this.options) === null || _g === void 0 ? void 0 : _g.getAllExtraData) {
                this.databaseAvialableExtensions = yield mgClient.queryDatabase(queries_1.query3_get_database_available_extensions);
                this.databaseConfig = yield mgClient.queryDatabase(queries_1.query5_get_database_config);
                this.databaseStatStatements = yield mgClient.queryDatabase(queries_1.query4_get_database_stat_statements);
            }
            if (!(this.options && ((_h = this.options) === null || _h === void 0 ? void 0 : _h.keepClientConnectionOpen))) {
                mgClient.endClient();
            }
        });
    }
    aggregateResourcesToOneResource() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const pgStatsTablesDataMap = new Map();
            const tablesRowsAndPagesCountMap = new Map();
            (_a = this.partialPgStatsTablesData) === null || _a === void 0 ? void 0 : _a.map((data) => {
                if (data && (data === null || data === void 0 ? void 0 : data.relid)) {
                    pgStatsTablesDataMap.set(data === null || data === void 0 ? void 0 : data.relid, data);
                }
            });
            (_b = this.tablesRowsAndPagesCount) === null || _b === void 0 ? void 0 : _b.map((data) => {
                if (data && (data === null || data === void 0 ? void 0 : data.relid)) {
                    tablesRowsAndPagesCountMap.set(data === null || data === void 0 ? void 0 : data.relid, data);
                }
            });
            const aggregateStructure = (_c = this.pgStructure) === null || _c === void 0 ? void 0 : _c.map((schema) => {
                var _a;
                return Object.assign(Object.assign({}, schema), { tables: (_a = schema === null || schema === void 0 ? void 0 : schema.tables) === null || _a === void 0 ? void 0 : _a.map((table) => {
                        const _a = pgStatsTablesDataMap.get(table.tableId), { relid } = _a, pgClassTableData = __rest(_a, ["relid"]);
                        const { rows, pages } = tablesRowsAndPagesCountMap.get(table.tableId);
                        return Object.assign(Object.assign(Object.assign({}, table), pgClassTableData), { rows: rows, pages: pages });
                    }) });
            });
            this.dbDetails = aggregateStructure || [];
        });
    }
    getDbDetailsUseConnectionString(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.setClientFromConnection(connection);
            }
            catch (error) {
                throw (error);
            }
        });
    }
    getDbDetails(clientOrConnectionConfig, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.options = options;
                if (clientOrConnectionConfig instanceof pg_1.Client) {
                    this.setClientFromClientInstance(clientOrConnectionConfig);
                }
                else {
                    this.setClientFromConnection(clientOrConnectionConfig);
                }
                yield this.setDataResourcesFromDb();
                this.aggregateResourcesToOneResource();
                return this.dbDetails;
            }
            catch (error) {
                throw (error);
            }
        });
    }
    getExtendedDbDetailsData(clientOrConnectionConfig, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.options = options;
                if (clientOrConnectionConfig instanceof pg_1.Client) {
                    this.setClientFromClientInstance(clientOrConnectionConfig);
                }
                else {
                    this.setClientFromConnection(clientOrConnectionConfig);
                }
                yield this.setDataResourcesFromDb();
                this.aggregateResourcesToOneResource();
                return {
                    dbDetails: this.dbDetails,
                    databaseConfig: this.databaseConfig,
                    databaseAvialableExtensions: this.databaseAvialableExtensions,
                    databaseStatStatements: this.databaseStatStatements
                };
            }
            catch (error) {
                throw (error);
            }
        });
    }
}
exports.default = PGDbDetails;
//# sourceMappingURL=index.js.map